Unaval - only contains one value

Interation #1:

unival

  1
 1 1
 
  1
 1  1
   2

public boolean isUnivalTree(Node node) {
    int unaval = node.value;
    return isUnivalTree(node.left, value) && isUnivalTree(node.right, value);
}

public boolean isUnivalTree(Node node, int value) {
    if ( node != null ) {
        if ( node.left != null && node.right != null && node.left.value == value && node.right.value == value ) {
            return isUnivalTree(node.left, value) && isUnivalTree(node.right, value);
        }
        else if ( node.left != null && node.left.value == value ) {
            return isUnivalTree(node.left, value);
        }
        
        else if ( node.right.value == value ) {
            return isUnivalTree(node.right, value);
        }
        else {
            return false;
        }
    }
}

Interation #2:


unival

  1
 1 1
 
  1
 1  1
   2

public boolean isUnivalTree(Node node) {
    int unaval = node.value;
    return isUnivalTree(node.left, value) && isUnivalTree(node.right, value);
}

public boolean isUnivalTree(Node node, int value) {
    if ( node != null ) {
        if ( node.left == null && node.right == null ) {
            return node.value == val
        }
        if ( node.left != null && node.right != null && node.left.value == value && node.right.value == value ) {
            return isUnivalTree(node.left, value) && isUnivalTree(node.right, value);
        }
        else if ( node.left != null && node.left.value == value ) {
            return isUnivalTree(node.left, value);
        }
        
        else if ( node.right.value == value ) {
            return isUnivalTree(node.right, value);
        }
        else {
            return false;
        }
    }
}

Interation #3:

unival

  1
 1 1
 
  1
 1  1
   2

public boolean isUnivalTree(Node node) {
    int unaval = node.value;
    return isUnivalTree(node.left, value) && isUnivalTree(node.right, value);
}

public boolean isUnivalTree(Node node, int value) {
    if ( node != null ) {
        if ( node.left == null && node.right == null ) {
            return node.value == value;
        }
        if ( node.left != null ) {
            return isUnivalTree(node.left, value);
        }
        if ( node.right.value == value ) {
            return isUnivalTree(node.right, value);
        }
    }
}

Interation #4:

unival

  1
 1 1
 
  1
 1  1
   2

public boolean isUnivalTree(Node node) {
    int unaval = node.value;
    return isUnivalTree(node.left, value) && isUnivalTree(node.right, value);
}

public boolean isUnivalTree(Node node, int value) {
    if ( node != null ) {
        if ( node.left == null && node.right == null ) {
            return node.value == value;
        }
        if ( node.left != null ) {
            return isUnivalTree(node.left, value);
        }
        if ( node.right != null ) {
            return isUnivalTree(node.right, value);
        }
    }
}

Interation #5:

unival

  1
 1 1
 
  1
 1  1
   2

public boolean isUnivalTree(Node node) {
    int unaval = node.value;
    return isUnivalTree(node, value);
}

public boolean isUnivalTree(Node node, int value) {
    if ( node != null ) {
        if ( node.left == null && node.right == null ) {
            return node.value == value;
        }
        if ( node.left != null ) {
            return isUnivalTree(node.left, value);
        }
        if ( node.right != null ) {
            return isUnivalTree(node.right, value);
        }
    }
}

Interation #6:

unival

  1
 1 1
 
  1
 1  1
   2
   
  1
 2 1

  1
 1 2

public boolean isUnivalTree(Node node) {
    int unaval = node.value;
    return isUnivalTree(node, value);
}

public boolean isUnivalTree(Node node, int value) {
    if ( node == null ) {
        return true;
    }
    else if ( node.left == null && node.right == null ) {
        return node.value == value;
    }
    else return isUnivalTree(node.left, value) and isUnivalTree(node.right, value);
}

===========================================

    1
  1   1     => Expected: 3
 
 
    1
  1   1
     2      => Expected: 2
 
    1
  2   3
 2 2 3 3    => Expected: 6


public int countUnivalSubTrees(Node node) {
    // TODO: implement
}

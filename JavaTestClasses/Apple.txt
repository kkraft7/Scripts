
import java.io.*;
import java.util.*;

public class Solution {
  
  public static int longestValidParentheses(String str) {
    int count == 0;
    Stack openParens = new Stack<Char>();
    for (int i = 0; int < str.length; i++) {
      if (str.charAt(i) == '(') {
        openParens.push(str.charAt(i);
        count++;
      }
      else if (r.charAt(i) == ')') {
        if (openParens.size() > 0) {
          openParens.pop();
          count++;
        }
        else if (count > 0) return count;
      }
      else if (count > 0) {
        return count;
      }
    }
    return count;
  }
  
  public static void main(String[] args) {
    
    final String str = ")()())";
    
    System.out.println("Max length with longest valid parentheses: " +     longestValidParentheses(str));
    
  }


# Implement your own boolean AND and OR operator
/*
 * To execute Java, please define "static void main" on a class
 * named Solution.
 *
 * If you need more classes, simply define them inline.
 */


import java.io.*;
import java.util.*;

public static boolean andOP(boolean leftOperand, boolean rightOperand) {
    if (leftOperand == true) {
      if (rightOperand == true) {
        return true;
      }
    }
    return false;
  }
  
  public static boolean orOP(boolean leftOperand, boolean rightOperand) {
    if (leftOperand == true) {
      return true;
    }
    if (rightOperand == true) {
      return true;
    }
    return false;
  }
